(defwidget barbutton [?onclick ?class ?visible]
  (button
    :class "barbutton ${class}"
    :onclick onclick
    :visible visible
    (box
      (children)
    )
  )
)

(defvar hover-clock false)
(defpoll time :interval "1s" :initial "00 : 00 : 00" "date +'%H : %M : %S'")
(defpoll date :interval "10s" "date +'%e %B %Y, %A'")
(defwidget clock []
  (eventbox
    :onhover "eww update hover-clock=true; eww open info"
    :onhoverlost "eww update hover-clock=false"
    (label
      :class "clock"
      :text "${time}"
      :tooltip "${date}"
    )
  )
)

(deflisten hyprland "./scripts.sh hyprland")
(defwidget workspace [id]
  (barbutton
    :visible { hyprland.workspaces[id - 1].exists }
    :class "${hyprland.active == id ? "workspaceactive" : "workspace"}"
    :onclick "hyprctl dispatch workspace ${id}"
    "${id}"
  )
)
(defwidget workspaces []
  (eventbox
    :onscroll "[[ {} == 'up' ]] && hyprctl dispatch workspace e+1 || hyprctl dispatch workspace e-1"
    (box
      :spacing 4
      (workspace :id 1)
      (workspace :id 2)
      (workspace :id 3)
      (workspace :id 4)
      (workspace :id 5)
      (workspace :id 6)
      (workspace :id 7)
      (workspace :id 8)
      (workspace :id 9)
      (workspace :id 10)
    )
  )
)

(defwidget color-picker []
  (barbutton
    :class "baricon"
    :onclick "hyprpicker -a -n &"
    " "
  )
)

(defpoll touchpad-on :interval "3s" "[ -f /tmp/touchpad_off ] && echo 0 || echo 1")
(defwidget toggle-touchpad []
  (barbutton
    :class "baricon ${ touchpad-on == 1 ? "toggled workspace" : "" }"
    :onclick "./scripts.sh touchpad"
    (image
      :icon "input-touchpad-symbolic"
    )
  )
)

(defvar reveal-tools false)
(defwidget tools []
  (eventbox
    :onhover "eww update reveal-tools=true"
    :onhoverlost "eww update reveal-tools=false"
    (box
      :spacing 30
      :space-evenly false
      (label
        :text "" 
      )
      (revealer
        :transition "slideright"
        :duration "200ms"
        :reveal reveal-tools
        (box
          :spacing 10
          :space-evenly false
          (color-picker)
          (toggle-touchpad)
        )
      )
    )
  )
)

(defwidget metric [label value showvalue ?onscrollup ?onscrolldown ?onclick ?onhover ?onhoverlost ?class]
  (eventbox
    :class "metric ${class} ${onclick == "" ? "" : "barbutton"}"
    :onscroll "[[ {} == 'up' ]] && $(${onscrollup}) || $(${onscrolldown})"
    :onclick onclick
    :onhover onhover
    :onhoverlost onhoverlost
    (box
      :space-evenly false
      :spacing 6
      (label
        :class "baricon"
        :text label
      )
      (revealer
        :reveal showvalue
        :transition "slideright"
        (label
          :text value
        )
      )
    )
  )
)

(deflisten volume "./scripts.sh volume")
(deflisten muted "./scripts.sh muted")
(defwidget volume []
  (metric
    :class "volume"
    :value "${volume}%"
    :showvalue {muted == 0}
    :label {muted == 1 ? "" : ""}
    :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    :onscrollup "wpctl set-volume @DEFAULT_AUDIO_SINK@ 2%+"
    :onscrolldown "wpctl set-volume @DEFAULT_AUDIO_SINK@ 2%-"
  )
)

(deflisten mic-volume "./scripts.sh mic-volume")
(deflisten mic-muted "./scripts.sh mic-muted")
(defwidget microphone []
  (metric
    :class "microphone"
    :value "${mic-volume}%"
    :showvalue {mic-muted == 0}
    :label {mic-muted == 1 ? "" : ""}
    :onclick "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
    :onscrollup "wpctl set-volume @DEFAULT_AUDIO_SOURCE@ 2%+"
    :onscrolldown "wpctl set-volume @DEFAULT_AUDIO_SOURCE@ 2%-"
  )
)

(deflisten brightness "./scripts.sh brightness")
(defwidget brightness []
  (metric
    :class "brightness"
    :value "${brightness}%"
    :showvalue true
    :label "󰃟"
    :onscrollup "brightnessctl set 5%+ > /dev/null 2> /dev/null"
    :onscrolldown "brightnessctl set 5%-"
  )
)

(defpoll charging :interval "3s" "cat /sys/class/power_supply/ADP1/online")
(defwidget battery []
  (metric
    :class "battery"
    :value "${round(EWW_BATTERY.total_avg, 0)}%"
    :showvalue true
    :label {charging == 1 ? "󱐋" : "󰁾"}
  )
)

(defwidget memory []
  (metric
    :class "memory"
    :value "${round(EWW_RAM.used_mem_perc, 0)}%"
    :showvalue true
    :label "󰘚"
  )
)

(defwidget cpu []
  (metric
    :class "cpu"
    :value "${round(EWW_CPU.avg, 0)}%"
    :showvalue true
    :label "󰍛"
  )
)

(defwindow bar
  :monitor 0
  :geometry (geometry
    :width "100%"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  (centerbox
    :class "bar"
    (box
      :class "bar-box"
      :space-evenly false
      :spacing 6
      :halign "start"
      (tools)
    )
    (box
      :class "bar-box"
      :space-evenly false
      (workspaces)
    )
    (box
      :class "bar-box"
      :space-evenly false
      :spacing 16
      :halign "end"
      (volume)
      (microphone)
      (battery)
      (brightness)
      (memory)
      (cpu)
      (clock)
    )
  )
)

(defvar hover-info false)
(defwindow info
  :monitor 0
  :geometry (geometry
    :y "-32px"
    :anchor "right top"
  )
  :stacking "fg"
  :exclusive false
  :namespace "slidedown"
  (eventbox
    :onhover "eww update hover-info=true"
    :onhoverlost "eww update hover-info=false; eww close info"
    :class ""
    (box
      :class "barpadding"
      (box
        :class "infor"
        (calendar)
      )
    )
  )
)
